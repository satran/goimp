package main

import (
	"flag"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/satran/goimp"
)

var (
	gopathPrefix string
)

func init() {
	log.SetFlags(0)
	log.SetOutput(os.Stderr)
	path := os.Getenv("GOPATH")
	if path == "" {
		log.Fatal("GOPATH not set")
	}
	gopath := strings.Split(path, ":")[0]
	os.Setenv("GOPATH", gopath)
	gopathPrefix = filepath.Join(gopath, "src")
}

func main() {
	depsFile := flag.String("deps", "deps", "dependency file generated by goimp-freeze")
	flag.Parse()

	content, err := ioutil.ReadFile(*depsFile)
	if err != nil {
		log.Fatal(err)
	}

	deps := strings.Split(strings.Trim(string(content), "\n"), "\n")
	for _, dep := range deps {
		splits := strings.Split(dep, " ")
		imp := splits[0]
		var hash string
		if len(splits) > 1 {
			hash = splits[1]
		}
		if exists(filepath.Join(gopathPrefix, imp)) == nil {
			log.Printf("fetching %s...", imp)
			err = goimp.Fetch(imp, gopathPrefix)
		} else {
			log.Printf("go get %s...", imp)
			err = goimp.Execute("", "go", "get", "-u", imp)
		}
		if err != nil {
			log.Printf("%s", err)
			continue
		}
		if hash == "" {
			continue
		}
		log.Printf("checkout to %s...", hash)
		err = goimp.Checkout(imp, gopathPrefix, hash)
		if err != nil {
			log.Printf("%s", err)
			continue
		}
	}
}

func exists(dir string) error {
	dir = filepath.Clean(dir)
	_, err := os.Stat(dir)
	if err != nil {
		return err
	}
	return nil
}
