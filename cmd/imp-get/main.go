package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/satran/goimp"
)

var (
	gopathPrefix string
)

func init() {
	log.SetFlags(log.Lshortfile)
	log.SetOutput(os.Stderr)
	path := os.Getenv("GOPATH")
	if path == "" {
		log.Fatal("GOPATH not set")
	}
	gopath := strings.Split(path, ":")[0]
	os.Setenv("GOPATH", gopath)
	gopathPrefix = filepath.Join(gopath, "src")
}

func main() {
	depsFile := flag.String("deps", "deps", "dependency file generated by goimp-freeze")
	flag.Parse()

	content, err := ioutil.ReadFile(*depsFile)
	if err != nil {
		log.Fatal(err)
	}

	deps := strings.Split(strings.Trim(string(content), "\n"), "\n")
	for _, dep := range deps {
		err = goGet(dep)
		if err != nil {
			log.Printf("%s: %s", dep, err)
		}
	}
}

var (
	getCmd  = "go"
	getArgs = "get -u %s"
)

func goGet(path string) error {
	splits := strings.Split(path, " ")
	imp := splits[0]
	var hash string
	if len(splits) > 1 {
		hash = splits[1]
	}
	args := strings.Split(fmt.Sprintf(getArgs, imp), " ")
	cmd := exec.Command(getCmd, args...)
	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Printf("%s", output)
		return err
	}
	if hash != "" {
		return goimp.Checkout(imp, gopathPrefix, hash)
	}
	return nil
}
